import streamlit as st
import pandas as pd
from uxcopilot import UXCopilot

st.set_page_config(page_title="UX Copilot Dashboard", layout="wide")
st.title("üß† UX Copilot")
st.markdown("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π UX-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.")

uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    ux = UXCopilot(df)

    num_personas = st.slider("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω", 1, 10, 3)
    qualitative_count = st.slider("üé§ –ö–æ–ª-–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)", 1, 10, 5)

    hypotheses = st.text_area(
        "üí° –í–≤–µ–¥–∏—Ç–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
        "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n–£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n–î–æ–±–∞–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
    ).splitlines()

    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë"):
        st.header("üë§ –ü–µ—Ä—Å–æ–Ω—ã")
        personas = ux.build_personas()[:num_personas]
        for i, persona in enumerate(personas):
            st.write(f"**{persona['name']}** ‚Äî –°–µ–≥–º–µ–Ω—Ç: {persona['segment']}")
            st.write(f"–í–æ–∑—Ä–∞—Å—Ç: {persona['age_range']}")
            st.write(f"–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: {', '.join(persona['common_needs'])}")
            st.write(f"–ë–æ–ª–∏: {', '.join(persona['pain_points'])}")
            st.markdown("---")

        st.header("üó∫Ô∏è Customer Journey Map")
        for i in range(len(personas)):
            cjm = ux.build_customer_journey_map(i)
            st.subheader(f"{personas[i]['name']}")
            for stage, data in cjm.items():
                st.markdown(f"**{stage}**")
                st.write(f"üéØ –¶–µ–ª–∏: {', '.join(data['goals'])}")
                st.write(f"üìû –¢–æ—á–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {', '.join(data['touchpoints'])}")
                st.write(f"‚ö†Ô∏è –ë–æ–ª–∏: {', '.join(data['pain_points'])}")

       st.header("üß™ –°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")

        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
        st.subheader("–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ")
        qualitative = ux.simulate_research("qualitative", interview_limit=qualitative_count)
        
        st.markdown("**–í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:**")
        st.markdown(", ".join(f"`{t}`" for t in qualitative["themes"]))
        
        st.markdown("**–ò–Ω—Ç–µ—Ä–≤—å—é (–≤—ã–¥–µ—Ä–∂–∫–∏):**")
        for i, pain in enumerate(qualitative["interviews"], 1):
            st.markdown(f"{i}. {pain}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
        st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ")
        quantitative = ux.simulate_research("quantitative")
        satisfaction = quantitative["survey_results"]["satisfaction"]
        nps = quantitative["survey_results"]["nps"]
        sample = quantitative["sample_size"]
        
        col1, col2, col3 = st.columns(3)
        col1.metric("üü¢ CSI (Satisfaction)", f"{satisfaction:.2f}", delta=None)
        col2.metric("üìä NPS", nps)
        col3.metric("üë• –ö–æ–ª-–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤", sample)


        st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑")
        test_results = ux.test_interface_hypotheses(hypotheses)
        for h, res in test_results.items():
            st.markdown(f"**{h}** ‚Äî üí° Confidence: {res['confidence']}, üí• Impact: {res['impact']}, üß≠ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {res['recommendation']}")

        st.header("üìÑ –û—Ç—á—ë—Ç –≤ PDF")
        ux.generate_pdf_report("output/ux_report.pdf")
        with open("output/ux_report.pdf", "rb") as file:
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å PDF", file, file_name="UX_Report.pdf", mime="application/pdf")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
