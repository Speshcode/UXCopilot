
import streamlit as st
import pandas as pd
from uxcopilot import UXCopilot

st.set_page_config(page_title="UX Copilot", layout="wide")
st.title("üß† UX Copilot")

st.sidebar.header("üîß –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:")
task = st.sidebar.radio("", [
    "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å CJM",
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã",
    "–¢–µ—Å—Ç First Click (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞)",
    "–ì–ª—É–±–∏–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
    "–ó–∞–º–µ—Ä NPS –∏ CSI"
])

uploaded_file = st.sidebar.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
else:
    df = pd.DataFrame({
        'id': range(1, 11),
        'age': [25, 32, 40, 29, 35, 45, 52, 23, 30, 38],
        'segment': ['A', 'A', 'B', 'B', 'A', 'C', 'C', 'A', 'B', 'C'],
        'needs': ['–±—ã—Å—Ç—Ä–æ', '—É–¥–æ–±–Ω–æ', '–Ω–∞–¥—ë–∂–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—É–¥–æ–±–Ω–æ', '–¥—ë—à–µ–≤–æ', '–±—ã—Å—Ç—Ä–æ', '—É–¥–æ–±–Ω–æ', '–Ω–∞–¥—ë–∂–Ω–æ', '–¥—ë—à–µ–≤–æ'],
        'pain_points': ['–∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞', '—Å–ª–æ–∂–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞',
                        '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', '—Å–ª–æ–∂–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞', '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏']
    })

ux = UXCopilot(df)

if task == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å CJM":
    st.header("üó∫Ô∏è Customer Journey Map")
    personas = ux.build_personas()
    idx = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω—É", list(range(len(personas))), format_func=lambda i: personas[i]['name'])
    cjm = ux.build_customer_journey_map(idx)
    img_path = ux.draw_cjm_timeline(personas[idx]["name"], cjm)
    st.image(img_path, caption=f"CJM: {personas[idx]['name']}", use_column_width=True)

    if st.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF"):
        ux.generate_pdf_report("output/ux_report.pdf", selected_personas=[personas[idx]])
        with open("output/ux_report.pdf", "rb") as f:
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å PDF", f, file_name="UX_Report.pdf", mime="application/pdf")

elif task == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã":
    st.header("üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑")
    hypotheses = st.text_area("–í–≤–µ–¥–∏—Ç–µ –≥–∏–ø–æ—Ç–µ–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):", "–ò–∑–º–µ–Ω–∏—Ç—å CTA\n–°–æ–∫—Ä–∞—Ç–∏—Ç—å —à–∞–≥–∏\n–î–æ–±–∞–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ").splitlines()
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã"):
        results = ux.test_interface_hypotheses(hypotheses)
        for h, res in results.items():
            st.markdown(f"**{h}** ‚Äî Confidence: `{res['confidence']}`, Impact: `{res['impact']}`, –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: `{res['recommendation']}`")

elif task == "–¢–µ—Å—Ç First Click (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞)":
    import numpy as np
    import matplotlib.pyplot as plt
    from PIL import Image
    import os

    st.header("üñ±Ô∏è First Click Test")
    image_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞–∫–µ—Ç (PNG/JPG)", type=["png", "jpg", "jpeg"])
    if image_file:
        img = Image.open(image_file)
        st.image(img, use_column_width=True)
        st.info("–°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–∫–æ–≤ (–≤ –±—É–¥—É—â–µ–º ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏)")
        w, h = img.size
        n = st.slider("–°–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", 10, 100, 40)
        x, y = np.random.randint(0, w, n), np.random.randint(0, h, n)
        fig, ax = plt.subplots()
        ax.imshow(img)
        ax.imshow(np.histogram2d(x, y, bins=[w//10, h//10])[0].T, cmap="hot", alpha=0.5, extent=(0, w, h, 0))
        ax.set_title("üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞")
        ax.axis('off')
        path = "output/first_click_heatmap.png"
        os.makedirs("output", exist_ok=True)
        plt.savefig(path)
        st.image(path)
        col1, col2 = st.columns(2)
        col1.metric("üü¢ CSI", round(np.random.uniform(3.5, 5), 2))
        col2.metric("üß™ UMUX", round(np.random.uniform(65, 95), 1))
        with open(path, "rb") as f:
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç—É", f, file_name="heatmap.png", mime="image/png")
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞.")

elif task == "–ì–ª—É–±–∏–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é":
    st.header("üéôÔ∏è –ì–ª—É–±–∏–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é")
    qualitative = ux.simulate_research("qualitative", interview_limit=5)
    st.subheader("üß© –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:")
    st.write(", ".join(qualitative["themes"]))
    st.subheader("üìã –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for i, pain in enumerate(qualitative["interviews"], 1):
        st.markdown(f"{i}. {pain}")

elif task == "–ó–∞–º–µ—Ä NPS –∏ CSI":
    st.header("üìä –ó–∞–º–µ—Ä—ã")
    quantitative = ux.simulate_research("quantitative")
    st.metric("üü¢ CSI", quantitative["survey_results"]["satisfaction"])
    st.metric("üìà NPS", quantitative["survey_results"]["nps"])
    st.metric("üë• –ö–æ–ª-–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤", quantitative["sample_size"])
