import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import os

def run_first_click_test():
    st.header("üñ±Ô∏è First Click Attention Insight")

    uploaded_image = st.file_uploader("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (JPG –∏–ª–∏ PNG)", type=["png", "jpg", "jpeg"])

    if uploaded_image:
        image = Image.open(uploaded_image)
        st.image(image, caption="–ú–∞–∫–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", use_container_width=True)

        width, height = image.size
        num_clicks = st.slider("üî¢ –ö–æ–ª-–≤–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 10, 100, 40)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        x = np.random.randint(0, width, num_clicks)
        y = np.random.randint(0, height, num_clicks)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.imshow(image)
        heatmap_data, _, _ = np.histogram2d(x, y, bins=[width // 10, height // 10])
        ax.imshow(heatmap_data.T, cmap="hot", alpha=0.5, extent=(0, width, height, 0))
        ax.set_title("üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–ª–∏–∫–æ–≤")
        ax.set_xticks([])
        ax.set_yticks([])

        heatmap_path = "output/first_click_heatmap.png"
        os.makedirs("output", exist_ok=True)
        plt.savefig(heatmap_path, bbox_inches='tight')
        plt.close()

        st.image(heatmap_path, caption="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞", use_container_width=True)

        # AOI ‚Äî –≤–µ—Ä—Ö, —Å–µ—Ä–µ–¥–∏–Ω–∞, –Ω–∏–∑
        top = y < height / 3
        middle = (y >= height / 3) & (y < 2 * height / 3)
        bottom = y >= 2 * height / 3

        top_pct = round(np.sum(top) / num_clicks * 100, 1)
        middle_pct = round(np.sum(middle) / num_clicks * 100, 1)
        bottom_pct = round(np.sum(bottom) / num_clicks * 100, 1)

        # Clarity Score: —á–µ–º –º–µ–Ω—å—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚Äî —Ç–µ–º –≤—ã—à–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
        clarity = round(100 - np.std(heatmap_data) * 2, 1)
        if clarity < 0:
            clarity = 0.0

        st.markdown(f"### üß† Clarity Score: `{clarity} / 100`")
        st.markdown("### üìä –í–Ω–∏–º–∞–Ω–∏–µ –ø–æ –∑–æ–Ω–∞–º:")
        st.markdown(f"- üîº –í–µ—Ä—Ö: **{top_pct}%**")
        st.markdown(f"- üîΩ –¶–µ–Ω—Ç—Ä: **{middle_pct}%**")
        st.markdown(f"- ‚¨áÔ∏è –ù–∏–∑: **{bottom_pct}%**")

        # –ú–µ—Ç—Ä–∏–∫–∏ CSI –∏ NPS
        col1, col2 = st.columns(2)
        col1.metric("üü¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å (CSI)", round(np.random.uniform(3.5, 5), 2))
        col2.metric("üß™ –õ–æ—è–ª—å–Ω–æ—Å—Ç—å (NPS)", round(np.random.uniform(40, 80), 1))

        with open(heatmap_path, "rb") as img_file:
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É", img_file, file_name="first_click_heatmap.png", mime="image/png")
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
